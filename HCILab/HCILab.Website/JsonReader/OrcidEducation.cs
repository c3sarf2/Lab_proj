// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType_Educations;
//
//    var readEducations = ReadEducations.FromJson(jsonString);

namespace QuickType_Educations
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OrcidEducation
    {
        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("affiliation-group")]
        public List<AffiliationGroup> AffiliationGroup { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class AffiliationGroup
    {
        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("external-ids")]
        public ExternalIds ExternalIds { get; set; }

        [JsonProperty("summaries")]
        public List<Summary> Summaries { get; set; }
    }

    public partial class ExternalIds
    {
        [JsonProperty("external-id")]
        public List<object> ExternalId { get; set; }
    }

    public partial class EdDate
    {
        [JsonProperty("value")]
        public long Value { get; set; }
    }

    public partial class Summary
    {
        [JsonProperty("education-summary")]
        public EducationSummary EducationSummary { get; set; }
    }

    public partial class EducationSummary
    {
        [JsonProperty("created-date")]
        public EdDate CreatedDate { get; set; }

        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("source")]
        public Source Source { get; set; }

        [JsonProperty("put-code")]
        public long PutCode { get; set; }

        [JsonProperty("department-name")]
        public object DepartmentName { get; set; }

        [JsonProperty("role-title")]
        public string RoleTitle { get; set; }

        [JsonProperty("start-date")]
        public Date StartDate { get; set; }

        [JsonProperty("end-date")]
        public Date EndDate { get; set; }

        [JsonProperty("organization")]
        public Organization Organization { get; set; }

        [JsonProperty("url")]
        public object Url { get; set; }

        [JsonProperty("external-ids")]
        public object ExternalIds { get; set; }

        [JsonProperty("display-index")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DisplayIndex { get; set; }

        [JsonProperty("visibility")]
        public string Visibility { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class Date
    {
        [JsonProperty("year")]
        public Day Year { get; set; }

        [JsonProperty("month")]
        public Day Month { get; set; }

        [JsonProperty("day")]
        public Day Day { get; set; }
    }

    public partial class Day
    {
        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class Organization
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("disambiguated-organization")]
        public DisambiguatedOrganization DisambiguatedOrganization { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("region")]
        public string Region { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }
    }

    public partial class DisambiguatedOrganization
    {
        [JsonProperty("disambiguated-organization-identifier")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DisambiguatedOrganizationIdentifier { get; set; }

        [JsonProperty("disambiguation-source")]
        public string DisambiguationSource { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("source-orcid")]
        public SourceOrcid SourceOrcid { get; set; }

        [JsonProperty("source-client-id")]
        public object SourceClientId { get; set; }

        [JsonProperty("source-name")]
        public Day SourceName { get; set; }

        [JsonProperty("assertion-origin-orcid")]
        public object AssertionOriginOrcid { get; set; }

        [JsonProperty("assertion-origin-client-id")]
        public object AssertionOriginClientId { get; set; }

        [JsonProperty("assertion-origin-name")]
        public object AssertionOriginName { get; set; }
    }

    public partial class SourceOrcid
    {
        [JsonProperty("uri")]
        public Uri Uri { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("host")]
        public string Host { get; set; }
    }

    public partial class OrcidEducation
    {
        public static OrcidEducation FromJson(string json) => JsonConvert.DeserializeObject<OrcidEducation>(json, QuickType_Educations.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrcidEducation self) => JsonConvert.SerializeObject(self, QuickType_Educations.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
