// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var readWorks = ReadWorks.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OrcidWorks
    {
        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("group")]
        public List<Group> Group { get; set; }

        [JsonProperty("path", NullValueHandling = NullValueHandling.Ignore)]
        public string Path { get; set; }
    }

    public partial class Group
    {
        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("external-ids")]
        public ExternalIds ExternalIds { get; set; }

        [JsonProperty("work-summary")]
        public List<WorkSummary> WorkSummary { get; set; }
    }

    public partial class ExternalIds
    {
        [JsonProperty("external-id")]
        public List<ExternalId> ExternalId { get; set; }
    }

    public partial class ExternalId
    {
        [JsonProperty("external-id-type")]
        public string ExternalIdType { get; set; }

        [JsonProperty("external-id-value")]
        public string ExternalIdValue { get; set; }

        [JsonProperty("external-id-normalized")]
        public ExternalIdNormalized ExternalIdNormalized { get; set; }

        [JsonProperty("external-id-normalized-error")]
        public ExternalIdNormalizedError ExternalIdNormalizedError { get; set; }

        [JsonProperty("external-id-url")]
        public JournalTitle ExternalIdUrl { get; set; }

        [JsonProperty("external-id-relationship")]
        public string ExternalIdRelationship { get; set; }
    }

    public partial class ExternalIdNormalized
    {
        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("transient")]
        public bool Transient { get; set; }
    }

    public partial class ExternalIdNormalizedError
    {
        [JsonProperty("error-code")]
        public long ErrorCode { get; set; }

        [JsonProperty("error-message")]
        public string ErrorMessage { get; set; }

        [JsonProperty("transient")]
        public bool Transient { get; set; }
    }

    public partial class JournalTitle
    {
        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class EdDate
    {
        [JsonProperty("value")]
        public long Value { get; set; }
    }

    public partial class WorkSummary
    {
        [JsonProperty("put-code")]
        public long PutCode { get; set; }

        [JsonProperty("created-date")]
        public EdDate CreatedDate { get; set; }

        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("source")]
        public Source Source { get; set; }

        [JsonProperty("title")]
        public Title Title { get; set; }

        [JsonProperty("external-ids")]
        public ExternalIds ExternalIds { get; set; }

        [JsonProperty("url")]
        public JournalTitle Url { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("publication-date")]
        public PublicationDate PublicationDate { get; set; }

        [JsonProperty("journal-title")]
        public JournalTitle JournalTitle { get; set; }

        [JsonProperty("visibility")]
        public string Visibility { get; set; }

        [JsonProperty("path", NullValueHandling = NullValueHandling.Ignore)]
        public string Path { get; set; }

        [JsonProperty("display-index")]
        public long DisplayIndex { get; set; }
    }

    public partial class PublicationDate
    {
        [JsonProperty("year")]
        public JournalTitle Year { get; set; }

        [JsonProperty("month")]
        public JournalTitle Month { get; set; }

        [JsonProperty("day")]
        public JournalTitle Day { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("source-orcid")]
        public AssertionOriginOrcid SourceOrcid { get; set; }

        [JsonProperty("source-client-id")]
        public AssertionOriginOrcid SourceClientId { get; set; }

        [JsonProperty("source-name")]
        public JournalTitle SourceName { get; set; }

        [JsonProperty("assertion-origin-orcid")]
        public AssertionOriginOrcid AssertionOriginOrcid { get; set; }

        [JsonProperty("assertion-origin-client-id")]
        public object AssertionOriginClientId { get; set; }

        [JsonProperty("assertion-origin-name")]
        public JournalTitle AssertionOriginName { get; set; }
    }

    public partial class AssertionOriginOrcid
    {
        [JsonProperty("uri")]
        public Uri Uri { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("host")]
        public string Host { get; set; }
    }

    public partial class Title
    {
        [JsonProperty("title")]
        public JournalTitle TitleTitle { get; set; }

        [JsonProperty("subtitle")]
        public object Subtitle { get; set; }

        [JsonProperty("translated-title")]
        public object TranslatedTitle { get; set; }
    }

    public partial class OrcidWorks
    {
        public static OrcidWorks FromJson(string json) => JsonConvert.DeserializeObject<OrcidWorks>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrcidWorks self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }
    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
