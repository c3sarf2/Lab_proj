// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SearchOrcid;
//
//    var searchOr = SearchOr.FromJson(jsonString);

namespace SearchOrcid
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SearchOr
    {
        [JsonProperty("result")]
        public List<Result> Result { get; set; }

        [JsonProperty("num-found")]
        public long NumFound { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("orcid-identifier")]
        public OrcidIdentifier OrcidIdentifier { get; set; }
    }

    public partial class OrcidIdentifier
    {
        [JsonProperty("uri")]
        public Uri Uri { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("host")]
        public string Host { get; set; }
    }

    public partial class SearchOr
    {
        public static SearchOr FromJson(string json) => JsonConvert.DeserializeObject<SearchOr>(json, SearchOrcid.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SearchOr self) => JsonConvert.SerializeObject(self, SearchOrcid.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

   
}
