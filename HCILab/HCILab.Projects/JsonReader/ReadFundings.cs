// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickTypeReadFundings;
//
//    var fundings = Fundings.FromJson(jsonString);

namespace QuickTypeReadFundings
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Fundings
    {
        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("group")]
        public List<Group> Group { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class Group
    {
        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("external-ids")]
        public ExternalIds ExternalIds { get; set; }

        [JsonProperty("funding-summary")]
        public List<FundingSummary> FundingSummary { get; set; }
    }

    public partial class ExternalIds
    {
        [JsonProperty("external-id")]
        public List<ExternalId> ExternalId { get; set; }
    }

    public partial class ExternalId
    {
        [JsonProperty("external-id-type")]
        public string ExternalIdType { get; set; }

        [JsonProperty("external-id-value")]
        public string ExternalIdValue { get; set; }

        [JsonProperty("external-id-normalized")]
        public object ExternalIdNormalized { get; set; }

        [JsonProperty("external-id-normalized-error")]
        public object ExternalIdNormalizedError { get; set; }

        [JsonProperty("external-id-url")]
        public Month ExternalIdUrl { get; set; }

        [JsonProperty("external-id-relationship")]
        public string ExternalIdRelationship { get; set; }
    }

    public partial class Month
    {
        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class FundingSummary
    {
        [JsonProperty("created-date")]
        public EdDate CreatedDate { get; set; }

        [JsonProperty("last-modified-date")]
        public EdDate LastModifiedDate { get; set; }

        [JsonProperty("source")]
        public Source Source { get; set; }

        [JsonProperty("title")]
        public Title Title { get; set; }

        [JsonProperty("external-ids")]
        public ExternalIds ExternalIds { get; set; }

        [JsonProperty("url")]
        public Month Url { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("start-date")]
        public Date StartDate { get; set; }

        [JsonProperty("end-date")]
        public Date EndDate { get; set; }

        [JsonProperty("organization")]
        public Organization Organization { get; set; }

        [JsonProperty("visibility")]
        public string Visibility { get; set; }

        [JsonProperty("put-code")]
        public long PutCode { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("display-index")]
        public long DisplayIndex { get; set; }
    }

    public partial class EdDate
    {
        [JsonProperty("value")]
        public long Value { get; set; }
    }

    public partial class Date
    {
        [JsonProperty("year")]
        public Month Year { get; set; }

        [JsonProperty("month")]
        public Month Month { get; set; }

        [JsonProperty("day")]
        public Month Day { get; set; }
    }

    public partial class Organization
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("disambiguated-organization")]
        public DisambiguatedOrganization DisambiguatedOrganization { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("region")]
        public object Region { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }
    }

    public partial class DisambiguatedOrganization
    {
        [JsonProperty("disambiguated-organization-identifier")]
        public Uri DisambiguatedOrganizationIdentifier { get; set; }

        [JsonProperty("disambiguation-source")]
        public string DisambiguationSource { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("source-orcid")]
        public AssertionOriginOrcid SourceOrcid { get; set; }

        [JsonProperty("source-client-id")]
        public AssertionOriginOrcid SourceClientId { get; set; }

        [JsonProperty("source-name")]
        public Month SourceName { get; set; }

        [JsonProperty("assertion-origin-orcid")]
        public AssertionOriginOrcid AssertionOriginOrcid { get; set; }

        [JsonProperty("assertion-origin-client-id")]
        public object AssertionOriginClientId { get; set; }

        [JsonProperty("assertion-origin-name")]
        public Month AssertionOriginName { get; set; }
    }

    public partial class AssertionOriginOrcid
    {
        [JsonProperty("uri")]
        public Uri Uri { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("host")]
        public string Host { get; set; }
    }

    public partial class Title
    {
        [JsonProperty("title")]
        public Month TitleTitle { get; set; }

        [JsonProperty("translated-title")]
        public object TranslatedTitle { get; set; }
    }

    public partial class Fundings
    {
        public static Fundings FromJson(string json) => JsonConvert.DeserializeObject<Fundings>(json, QuickTypeReadFundings.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Fundings self) => JsonConvert.SerializeObject(self, QuickTypeReadFundings.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
